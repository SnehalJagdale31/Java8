package java8;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class StreamMinMaxExample {
	
	public static int findMaxvalue(List<Integer> integerList) {
		
		return  integerList.stream()
				//6 ->y
				//7 ->y
				//8 ->y
				//9 ->y
				//10 ->y
				//x variable holds the max value for each element in the iteration
		.reduce(0,(x,y)->x>y ? x : y);
		
		
	}
	
public static Optional<Integer> findMaxvalueOpetional(List<Integer> integerList) {
		
		return  integerList.stream()
				//6 ->y
				//7 ->y
				//8 ->y
				//9 ->y
				//10 ->y
				//x variable holds the max value for each element in the iteration
		.reduce((x,y)->x>y ? x : y);
		
		
	}


public static Optional<Integer> findMinvalueOpetional(List<Integer> integerList) {
	
	return  integerList.stream()
			//6 ->y
			//7 ->y
			//8 ->y
			//9 ->y
			//10 ->y
			//x variable holds the max value for each element in the iteration
	.reduce((x,y)->x<y ? x : y);
	
	
}

	public static void main(String[] args) {

		List<Integer> integerList = Arrays.asList(6,7,8,9,10);
		
//		int maxValue = findMaxvalue(integerList);
//		System.out.println(maxValue);
		
		Optional<Integer> maxValue = findMaxvalueOpetional(integerList);
		if(maxValue.isPresent()) {
			System.out.println("Max value using optional is: "+ maxValue.get());
		}else {
			System.out.println("Input List is empty");
		}
		
		Optional<Integer> minValue = findMinvalueOpetional(integerList);
		if(minValue.isPresent()) {
			System.out.println("min value using optional is: "+ minValue.get());
		}else {
			System.out.println("Input List is empty");
		}
	}

}
